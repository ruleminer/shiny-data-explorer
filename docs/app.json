[{"name": "app.py", "content": "from pathlib import Path\nfrom shiny import App, render, ui, Inputs, Outputs, Session, reactive, req\nfrom shiny.types import FileInfo\nimport shinyswatch\nfrom shinywidgets import output_widget, render_widget\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\n\n# import pyodide_js                   #package for ShinyLive\n# pyodide_js.loadPackage(\"scipy\")\n\nfile_path = Path(__file__).parent / \"example_data.csv\" #path to example data in ShinyLive\n\napp_ui = ui.page_navbar(\n    shinyswatch.theme.united(),\n    \n    ui.nav(\"Data Set\",\n        ui.row(\n            ui.column(6,\n                      ui.input_file(\"file1\", \"Select file:\", accept=[\".csv\"], multiple=False, \n                                    button_label = \"Browse...\",\n                                    placeholder = \"No file selected\")),\n            ui.column(6,\n                      ui.tags.p(\"Use example data\"),\n                      ui.input_switch(\"ready_data\", \"Example data\")),\n        ),\n    \n        ui.input_select(\n            \"number_of_rows\",\n            \"Number of displayed rows\",\n            {\n                \"10\": \"10\",\n                \"20\": \"20\",\n                \"50\": \"50\",\n                \"100\": \"100\",\n            },\n        ),\n        ui.output_data_frame(\"summary_data\"),\n\n    ),\n    ui.nav(\"Data description\",\n        ui.navset_tab(\n            ui.nav(\n            \"Data characteristics\",\n                ui.row(\n                    ui.column(6,\n                        \"Data characteristics\",\n                        ui.output_data_frame(\"charakterystyka_zbioru\")\n                    ),\n                    ui.column(6,\n                        \"Percentage of missing values\",\n                        ui.output_data_frame(\"wartosci_nan_ch\"),\n                    ),\n                ),\n            ),\n            ui.nav(\n                \"Primary statistics\",\n                ui.navset_pill(\n                    ui.nav(\"Numerical attribute statistics\",\n                            ui.markdown(\"\"),\n                            ui.input_selectize(\"numeric_stat\", \"Choose a numeric variable\", [], multiple=True),\n                            ui.output_data_frame(\"num_stats\"),\n                    ),\n                    ui.nav(\"Nominal attribute statistics\",\n                            ui.markdown(\"\"),\n                            ui.input_selectize(\"category_stat\", \"Choose a category variable\", [], multiple=True),\n                            ui.output_data_frame(\"atr_stats\")\n                    ),\n                ),\n            ),\n        ),\n    ),\n    ui.nav(\"Visualizations\",\n           ui.navset_tab(\n                ui.nav(\"Numerical attributes\",\n                       ui.row(\n                            ui.tags.h1(\"Histogram\"),\n                            ui.input_select(\"numeric_hist\", \"Choose a numeric variable\", []),\n                            ui.input_slider(\"bins\", \"Number of bins\", 2, 30, 15),\n                            output_widget(\"histogram\"),\n                        ),\n                       ui.row(\n                           \n                            ui.tags.h1(\"Box plot\"),\n                            ui.input_selectize(\"numeric_box\", \"Choose a variable\", [], multiple=True),\n                            output_widget(\"boxplot\"),\n                        ),\n                ),\n                ui.nav(\"Nominal attributes\", \n                    ui.input_select(\"category_bar\", \"Choose a category variable\", []),\n                    output_widget(\"barplot_atr\")\n                    ),\n            ),\n    ),\n    ui.nav(\"Correlations\",\n              ui.row(\n                ui.column(4,\n                             ui.input_select(\"numeric_corr\", \"Choose the first variable\", []),\n                             ),\n                ui.column(4,\n                             ui.input_select(\"numeric_corr2\", \"Choose the second variable\", []),\n                             ),\n                ui.column(4,\n                            ui.input_select(\"method_corr\", \"Select a method\", {\"pearson\":\"Pearson\",\n                                                                            \"spearman\":\"Spearman\",\n                                                                            \"kendall\":\"Kenall\"}),\n                        ),\n                output_widget(\"correlation\"),\n                ui.output_data_frame(\"corr_df\"),\n                ),\n    ),\n    ui.nav(\"Time series\",\n           ui.row(\n               ui.column(4,\n                    ui.input_select(\"time\", \"Choose a time series\", []),\n               ),\n               ui.column(4,\n                    ui.input_select(\"variable\", \"Choose a numeric variable\", []),\n               ),\n               ui.column(4,\n                    ui.input_select(\"category_time\", \"Choose a category variable\", []),\n               ),\n           ),\n            output_widget(\"time_city\"),\n    ),\n    \n    ui.nav(\"Data aggregators\", \n        ui.row(  \n            ui.column(6,\n                ui.input_select(\"category_agg\", \"Choose a category variable\", []),\n                ui.input_select(\"numeric_agg\", \"Choose a numeric variable\", []),\n            ),\n            ui.column(6, \n                ui.input_checkbox_group(\"statistic\", \"Choose metrics\",            \n                    {\n                        \"min\": \"Min\",\n                        \"max\": \"Max\",\n                        \"mean\": \"Average\",\n                        \"median\": \"Median\",\n                        \"q1\": \"Lower quartile\",\n                        \"q3\": \"Upper quartile\",\n                    },\n                ),\n            ),\n        ),\n        ui.output_data_frame(\"grouped_data\"),\n    ),\n    ui.nav(\"Outliers\",\n           ui.row(\n               ui.column(6,\n                         ui.input_select(\"method\", \"Choose a criterion\", [\"Q +/- 1.5IQR\", \"Q +/- 3IQR\"])\n                         ),\n                ui.column(6, \n                          ui.input_select(\"numeric_outliers\", \"Choose a variable\", [])\n                          ),\n                ),\n            ui.output_data_frame(\"outliers_df\"),\n           ),\n\n    title = \"Data Explorer\",\n    bg = \"#09171c\",\n)\n\n\ndef server(input, output, session):\n\n    @reactive.Calc\n    @reactive.event(input.ready_data, input.file1, ignore_none=True)\n    def parsed_file():\n\n        if input.ready_data():\n            path = file_path\n            df = pd.read_csv(path, index_col=False) \n            return df\n        \n        file: list[FileInfo] | None = input.file1()\n        \n        if file is None:\n            return pd.DataFrame()\n            \n        df = pd.read_csv(file[0][\"datapath\"], index_col=False)\n        \n        return df\n\n    \n    @reactive.Calc\n    def choose_categories():\n        data = parsed_file()\n        data.dropna(axis=1, how='all', inplace=True)\n        categorical_vars = data.select_dtypes(include=['object', 'category']).columns\n\n        return list(categorical_vars)\n    \n    @reactive.Calc\n    def choose_numeric():\n        data = parsed_file()\n        data.dropna(axis=1, how='all', inplace=True)\n        numeric_vars = data.select_dtypes(include=['int64', 'float64']).columns\n\n        return list(numeric_vars)\n    \n    @reactive.Calc\n    def stat_agg():\n\n        def q1(x):\n            return x.quantile(0.25)\n\n        def q3(x):\n            return x.quantile(0.75)\n\n        function_map = {\n            'q1': q1,\n            'q3': q3\n        }\n\n        inp = input.statistic()\n        stat = function_map[inp]\n\n        return stat\n\n    @reactive.Effect\n    def _():\n        x = choose_categories()\n\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n        \"category_stat\",\n        \n        choices = [f\"{str(i)}\" for i in x],\n        )\n\n    @reactive.Effect\n    def _():\n        x = choose_categories()\n\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n        \"category_bar\",\n        \n        choices = [f\"{str(i)}\" for i in x],\n        )\n    \n    @reactive.Effect\n    def _():\n        x = choose_categories()\n\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n        \"category_time\",\n        \n        choices = [f\"{str(i)}\" for i in x],\n        )\n\n    @reactive.Effect\n    def _():\n        x = choose_categories()\n\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n        \"category_agg\",\n        \n        choices = [f\"{str(i)}\" for i in x],\n        )\n    \n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_selectize(\n        \"numeric_stat\", choices = [f\"{str(i)}\" for i in y],\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_select(\n        \"numeric_hist\",\n        \n        choices = [f\"{str(i)}\" for i in y],\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_select(\n        \"numeric_corr\", choices = [f\"{str(i)}\" for i in y],\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_select(\n        \"numeric_corr2\", choices = [f\"{str(i)}\" for i in y],\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_selectize(\n        \"numeric_box\", choices = [f\"{str(i)}\" for i in y],\n        )\n\n\n    @reactive.Effect\n    def _():\n        z = choose_numeric()\n        data = parsed_file()\n\n        if z is None:\n            z = []\n        elif isinstance(z, str):\n            z = [z]  \n\n        if \"Szereg_czasowy\" in data.columns:\n            ui.update_select(\n            \"time\", choices = [f\"{str(i)}\" for i in z],\n            selected=\"Szereg_czasowy\"\n        )\n        else:\n            ui.update_select(\n                \"time\", choices = [f\"{str(i)}\" for i in z]\n            )\n\n    @reactive.Effect\n    def _():\n        z = choose_numeric()\n\n        if z is None:\n            z = []\n        elif isinstance(z, str):\n            z = [z]  \n            \n        ui.update_select(\n            \"variable\", choices = [f\"{str(i)}\" for i in z]\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_select(\n        \"numeric_agg\", choices = [f\"{str(i)}\" for i in y],\n        )\n\n    @reactive.Effect\n    def _():\n        y = choose_numeric()\n\n        if y is None:\n            y = []\n        elif isinstance(y, str):\n            y = [y]\n\n        ui.update_select(\n        \"numeric_outliers\", choices = [f\"{str(i)}\" for i in y],\n        )\n  \n    @output\n    @render.data_frame\n    def summary_data():\n        data = parsed_file()\n        \n        return render.DataGrid(\n            data.head(int(input.number_of_rows())),\n            height=350,\n            width=\"100%\",\n            filters=True,\n        )\n    \n    @render.data_frame\n    def charakterystyka_zbioru():\n        data = parsed_file()\n        df_dim = data.shape\n\n        data_info = pd.DataFrame(\n            {\n                \"Variable\": [\n                    \"Number of rows\",\n                    \"Number of columns\",\n                    \"Number of numeric columns\",\n                    \"Number of categorical columns\",\n                ],\n                \"Value\": [\n                    df_dim[0],\n                    df_dim[1],\n                    data.select_dtypes(include=\"number\").shape[1],\n                    data.select_dtypes(include=\"object\").shape[1],\n                ],\n            }\n        )\n\n        return render.DataGrid(data_info, width=\"100%\", height=\"100%\")\n\n    @render.data_frame\n    def wartosci_nan_ch():\n        data = parsed_file()\n        tmp = ((len(data) - data.count()) / len(data)) * 100\n        missing_data = pd.DataFrame({\"Variable\": tmp.index, \"Percentage [%]\": tmp.values})\n\n        return render.DataGrid(missing_data, width=\"100%\", height=\"100%\")\n\n    @render.data_frame\n    def num_stats():\n        data = parsed_file()\n        x = input.numeric_stat()\n        req(x)\n\n        stat_num = pd.DataFrame()\n        for i in range(len(x)):\n            tmp = data[x[i]].describe()\n            stat_num.insert(i, x[i], np.around(tmp.values))\n        \n        stat_num.insert(0, \"Statistics\", tmp.index)\n\n\n        return render.DataGrid(stat_num, width=\"100%\", height=\"100%\")\n\n    @render.data_frame\n    def atr_stats():\n        data = parsed_file()\n        x = choose_categories()\n        y = input.category_stat()\n        req(y)\n\n        if len(x) == 0:\n            return pd.DataFrame()\n        \n        stat_atr = pd.DataFrame()\n        for i in range(len(y)):\n            tmp = data[y[i]].describe()\n            stat_atr.insert(i, y[i], tmp.values)\n        \n        stat_atr.insert(0, \"Statistics\", tmp.index)\n\n\n        return render.DataGrid(stat_atr, width=\"100%\", height=\"100%\")\n\n    @render_widget\n    def histogram():\n        data = parsed_file()\n        data.dropna(axis=1, how='all', inplace=True)\n\n        fig = px.histogram(\n            data,\n            x=input.numeric_hist(),\n            nbins=input.bins(),\n            template=\"plotly_white\",\n            color_discrete_sequence=[\"#df6919\"]\n        )\n        return fig\n\n    @render_widget\n    def correlation():\n        data = parsed_file()\n        fig = px.scatter(\n            data, x=input.numeric_corr(), \n            y=input.numeric_corr2(), \n            template=\"plotly_white\",\n            color_discrete_sequence=[\"#df6919\"])\n\n        return fig\n\n    @render_widget\n    def boxplot():\n        data = parsed_file()\n        \n        fig = px.box(\n            data, y = list(input.numeric_box()),\n            template=\"plotly_white\",\n            color_discrete_sequence=[\"#df6919\"])\n        \n        return fig\n\n    @render_widget\n    def barplot_atr():\n        data = parsed_file()\n\n        x = choose_categories()\n        \n        if len(x) == 0:\n            return \n\n        df_tmp = data[input.category_bar()].value_counts()\n        df_count = pd.DataFrame(\n            {\"Category\": df_tmp.index, \"count\": df_tmp.values}\n        )\n\n        fig = px.bar(\n            df_count,\n            x=\"Category\",\n            y=\"count\",\n            title=\"Number of occurrences of a category\",\n            template=\"plotly_white\",\n            color_discrete_sequence=[\"#df6919\"],\n            height=500\n        )\n        return fig\n\n    @render.data_frame\n    def corr_df():\n        data = parsed_file()\n        x = input.numeric_corr()\n        y = input.numeric_corr2()\n\n        if len(x) == 0 or len(y) == 0:\n            return pd.DataFrame()\n\n\n        correlation = data[x].corr(data[y], method=input.method_corr())\n        corr_df = pd.DataFrame({\"Correlation\": [correlation], \"Method\": [input.method_corr()]})\n        \n        return render.DataGrid(corr_df, width=\"100%\", height=\"100%\")\n    \n    @render_widget\n    def time_city():\n        data = parsed_file()\n\n        cat = input.category_time()\n\n        df = data.sort_values(input.time())\n\n        if cat is None:\n            df_tmp = df.groupby(input.time())[input.variable()].mean()\n            fig = px.line(\n            df_tmp,\n            x=df_tmp.index,\n            y=df_tmp.values,\n            color=input.category_time(),\n            markers=True,\n            template=\"plotly_white\",\n        )\n        else:\n            fig = px.line(\n            df,\n            x=input.time(),\n            y=input.variable(),\n            color=input.category_time(),\n            markers=True,\n            template=\"plotly_white\",\n        )\n\n        return fig\n\n    \n    @render.data_frame\n    def grouped_data():\n\n\n        data = parsed_file()\n        stat = []\n        x = choose_categories()\n        req(input.statistic())\n        stat.append(input.statistic())\n       \n        if len(stat) == 0 or len(x) == 0:\n            return pd.DataFrame()\n        \n        df = data.groupby(input.category_agg())[input.numeric_agg()].agg(input.statistic())\n        df.insert(0,\"Category\", df.index)\n        return render.DataGrid(df, width=\"100%\", height=\"100%\")\n    \n    @render.data_frame\n    def outliers_df():\n        data = parsed_file()\n        x = input.numeric_outliers()\n\n        if input.method() == \"Q +/- 1.5IQR\":\n            cryt = 1.5\n        elif input.method() == \"Q +/- 3IQR\":\n            cryt = 3.0\n\n        m = np.median(data[x])\n        q1 = np.quantile(data[x], 0.25)\n        q3 = np.quantile(data[x], 0.75)\n        iqr = q3 - q1\n\n        indices = [i for i, num in enumerate(data[x]) if num < q1 - cryt * iqr or num > q3 + cryt * iqr]\n\n        if len(indices) == 0:\n            df = pd.DataFrame({\" \": [\"No outliers\"]})\n            return render.DataGrid(df, width=\"100%\", height=\"100%\")\n        else:\n            outliers = data.iloc[indices]\n            return render.DataGrid(outliers, width=\"100%\", height=\"100%\")\n       \n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# shiny-data-explorer\n\nThis is an application built with the Shiny package to perform basic analysis of data containing time series.\n", "type": "text"}, {"name": "aplikacja.txt", "content": "https://shinylive.io/py/app/#code=", "type": "text"}, {"name": "edytor_aplikacji.txt", "content": "https://shinylive.io/py/editor/#code=", "type": "text"}, {"name": "example_data.csv", "content": "", "type": "binary"}]